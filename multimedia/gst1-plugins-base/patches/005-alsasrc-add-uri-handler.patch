From 0e02989cbaddf0e53694e4bce595033e01528760 Mon Sep 17 00:00:00 2001
From: Abhilash Tuse <Abhilash.Tuse@imgtec.com>
Date: Fri, 2 Dec 2016 15:20:22 +0530
Subject: [PATCH] alsasrc: add uri handler

Add alsasrc:// uri handler so that automatic plugging can be
done from playbin

Change-Id: I04d6037b6ccfb7f38017f93fbfd7eb7bfa6ae372
Signed-off-by: Sagar Tikore <Sagar.Tikore@imgtec.com>
Signed-off-by: Abhilash Tuse <Abhilash.Tuse@imgtec.com>
---
 ext/alsa/gstalsasrc.c | 78 +++++++++++++++++++++++++++++++++++++++++++++++++--
 ext/alsa/gstalsasrc.h |  2 ++
 2 files changed, 77 insertions(+), 3 deletions(-)

diff --git a/ext/alsa/gstalsasrc.c b/ext/alsa/gstalsasrc.c
index a359cc3..4f74a2d 100644
--- a/ext/alsa/gstalsasrc.c
+++ b/ext/alsa/gstalsasrc.c
@@ -66,9 +66,6 @@ enum
   PROP_LAST
 };
 
-#define gst_alsasrc_parent_class parent_class
-G_DEFINE_TYPE (GstAlsaSrc, gst_alsasrc, GST_TYPE_AUDIO_SRC);
-
 static void gst_alsasrc_finalize (GObject * object);
 static void gst_alsasrc_set_property (GObject * object,
     guint prop_id, const GValue * value, GParamSpec * pspec);
@@ -88,6 +85,13 @@ static guint gst_alsasrc_read
 static guint gst_alsasrc_delay (GstAudioSrc * asrc);
 static void gst_alsasrc_reset (GstAudioSrc * asrc);
 
+static void gst_alsasrc_uri_handler_init (gpointer g_iface,
+    gpointer iface_data);
+
+#define gst_alsasrc_parent_class parent_class
+G_DEFINE_TYPE_WITH_CODE (GstAlsaSrc, gst_alsasrc, GST_TYPE_AUDIO_SRC,
+    G_IMPLEMENT_INTERFACE (GST_TYPE_URI_HANDLER, gst_alsasrc_uri_handler_init));
+
 /* AlsaSrc signals and args */
 enum
 {
@@ -1052,3 +1056,71 @@ prepare_error:
     return;
   }
 }
+
+static void gst_alsasrc_set_device_from_uri (GstAlsaSrc *src)
+{
+  gchar *device_name = NULL;
+  gchar **p = g_strsplit (src->uri, "://", 2);
+
+  if (p[1] && p[1][0]) {
+    device_name = p[1];
+  }
+
+  g_object_set (G_OBJECT (src), "device", device_name, NULL);
+  g_strfreev (p);
+}
+
+/*** GSTURIHANDLER INTERFACE *************************************************/
+
+static GstURIType
+gst_alsasrc_uri_get_type (GType type)
+{
+  return GST_URI_SRC;
+}
+
+static const gchar *const *
+gst_alsasrc_uri_get_protocols (GType type)
+{
+  static const gchar *protocols[] = { "alsasrc", NULL };
+
+  return protocols;
+}
+
+static gchar *
+gst_alsasrc_uri_get_uri (GstURIHandler * handler)
+{
+  GstAlsaSrc *alsasrc = GST_ALSA_SRC (handler);
+
+  return alsasrc->uri ? g_strdup (alsasrc->uri) : NULL;
+}
+
+static gboolean
+gst_alsasrc_uri_set_uri (GstURIHandler * handler, const gchar * uri,
+    GError ** error)
+{
+  GstAlsaSrc *alsasrc = GST_ALSA_SRC (handler);
+
+  if (GST_STATE (alsasrc) == GST_STATE_PLAYING ||
+      GST_STATE (alsasrc) == GST_STATE_PAUSED) {
+    g_set_error (error, GST_URI_ERROR, GST_URI_ERROR_BAD_STATE,
+        "Setting the 'uri' while the element is running is "
+        "not supported");
+    return FALSE;
+  }
+
+  g_free (alsasrc->uri);
+  alsasrc->uri = g_strdup (uri);
+  gst_alsasrc_set_device_from_uri (alsasrc);
+  return TRUE;
+}
+
+static void
+gst_alsasrc_uri_handler_init (gpointer g_iface, gpointer iface_data)
+{
+  GstURIHandlerInterface *iface = (GstURIHandlerInterface *) g_iface;
+
+  iface->get_type = gst_alsasrc_uri_get_type;
+  iface->get_protocols = gst_alsasrc_uri_get_protocols;
+  iface->get_uri = gst_alsasrc_uri_get_uri;
+  iface->set_uri = gst_alsasrc_uri_set_uri;
+}
diff --git a/ext/alsa/gstalsasrc.h b/ext/alsa/gstalsasrc.h
index 57e2701..e07b897 100644
--- a/ext/alsa/gstalsasrc.h
+++ b/ext/alsa/gstalsasrc.h
@@ -52,6 +52,8 @@ struct _GstAlsaSrc {
 
   gchar                 *device;
 
+  gchar                 *uri;
+
   snd_pcm_t             *handle;
   snd_pcm_hw_params_t   *hwparams;
   snd_pcm_sw_params_t   *swparams;
-- 
2.6.2

